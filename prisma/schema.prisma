generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/lib-server"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole       @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Notifications Notification[]
  Reply         Reply[]        @relation("CreatedBy")
  LikedReplies  Reply[]        @relation("LikedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(cuid())
  title      String
  body       String   @db.VarChar(2000)
  views      BigInt   @default(0)
  upvotes    Int      @default(0)
  created    DateTime @default(now())
  slug       String   @unique
  categoryId String
  userId     String
  Replies    Reply[]
  Category   Category @relation(fields: [categoryId], references: [id])
  Tags       Tag[]
  User       User     @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([userId])
}

model Reply {
  id      String   @id @default(cuid())
  body    String
  created DateTime @default(now())
  postId  String
  userId  String
  Post    Post     @relation(fields: [postId], references: [id])
  User    User     @relation("CreatedBy", fields: [userId], references: [id])
  Likes   User[]   @relation("LikedBy")

  @@index([postId])
  @@index([userId])
}

model Notification {
  id      String   @id @default(uuid())
  userId  String
  message String
  href    String
  read    Boolean  @default(false)
  created DateTime @default(now())
  User    User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id   String @id @default(cuid())
  name String
  Post Post[]
}

model Tag {
  id   String @id @default(cuid())
  name String
  Post Post[]
}

model LikedBy {
  A String
  B String

  @@unique([A, B], map: "_LikedBy_AB_unique")
  @@index([B], map: "_LikedBy_B_index")
  @@map("_LikedBy")
}

model PostToTag {
  A String
  B String

  @@unique([A, B], map: "_PostToTag_AB_unique")
  @@index([B], map: "_PostToTag_B_index")
  @@map("_PostToTag")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}
