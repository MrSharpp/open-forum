// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator kysely {
  provider = "prisma-kysely"

  output       = "../src/lib-server"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password    String
  role UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Replies     Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(cuid())
  title      String
  body       String
  views      BigInt   @default(0)
  upvotes    Int      @default(0)
  created    DateTime @default(now())
  slug        String @unique

  Replies    Reply[]
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  Tags       Tag[]
  User User @relation(fields: [userId], references: [id])
  userId String

  @@index([categoryId])
  @@index([userId])
}

model Reply {
  id      String   @id @default(cuid())
  body    String
  created DateTime @default(now())
  likes   Int      @default(0)
  Post    Post     @relation(fields: [postId], references: [id])
  postId  String

  User User @relation(fields: [userId], references: [id])
  userId String

  @@index([postId])
  @@index([userId])
}

model Category {
  id   String @id @default(cuid())
  name String
  Post Post[]
}

model Tag {
  id   String @id @default(cuid())
  name String
  Post Post[]
}
